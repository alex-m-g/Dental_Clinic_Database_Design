-- MySQL Script generated by MySQL Workbench
-- Thu Oct 24 00:42:09 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Customer` (
  `Customer_ID` INT NOT NULL AUTO_INCREMENT,
  `First_Name` VARCHAR(45) NOT NULL,
  `Last_Name` VARCHAR(45) NOT NULL,
  `Middle_Name` VARCHAR(45) NULL DEFAULT NULL,
  `Suffix` VARCHAR(10) NULL DEFAULT NULL,
  `Gender` ENUM('Male', 'Female') NOT NULL,
  `BirthDate` DATE NOT NULL,
  `Insurance` VARCHAR(225) NULL,
  PRIMARY KEY (`Customer_ID`));


-- -----------------------------------------------------
-- Table `mydb`.`Clinic`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Clinic` (
  `Clinic_ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(100) NOT NULL,
  `Address_Line` VARCHAR(100) NOT NULL,
  `City` VARCHAR(45) NOT NULL,
  `State` VARCHAR(45) NOT NULL,
  `Country` VARCHAR(45) NOT NULL,
  `Zip` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`Clinic_ID`));


-- -----------------------------------------------------
-- Table `mydb`.`Dental_Practitioner`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Dental_Practitioner` (
  `Dental_Practitioner_ID` INT NOT NULL AUTO_INCREMENT,
  `First_Name` VARCHAR(45) NOT NULL,
  `Last_Name` VARCHAR(45) NOT NULL,
  `Middle_Name` VARCHAR(45) NULL DEFAULT NULL,
  `Suffix` VARCHAR(10) NULL DEFAULT NULL,
  `Specialty` ENUM('Dentist', 'Periodontist', 'Orthodontist') NOT NULL,
  `Clinic_ID` INT NOT NULL,
  PRIMARY KEY (`Dental_Practitioner_ID`),
  INDEX (`Clinic_ID` ASC) VISIBLE,
  CONSTRAINT ``
    FOREIGN KEY (`Clinic_ID`)
    REFERENCES `mydb`.`Clinic` (`Clinic_ID`));


-- -----------------------------------------------------
-- Table `mydb`.`Dental_Visit`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Dental_Visit` (
  `Encounter_ID` INT NOT NULL AUTO_INCREMENT,
  `Customer_ID` INT NOT NULL,
  `Dental_Practitioner_ID` INT NOT NULL,
  `Visit_Date` DATE NOT NULL,
  `Visit_Time` TIME NOT NULL,
  `Insurance_Used` VARCHAR(225) NULL,
  PRIMARY KEY (`Encounter_ID`),
  INDEX (`Customer_ID` ASC) VISIBLE,
  INDEX (`Dental_Practitioner_ID` ASC) VISIBLE,
  CONSTRAINT ``
    FOREIGN KEY (`Customer_ID`)
    REFERENCES `mydb`.`Customer` (`Customer_ID`),
  CONSTRAINT ``
    FOREIGN KEY (`Dental_Practitioner_ID`)
    REFERENCES `mydb`.`Dental_Practitioner` (`Dental_Practitioner_ID`));


-- -----------------------------------------------------
-- Table `mydb`.`Billable_Outcome`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Billable_Outcome` (
  `Bill_ID` INT NOT NULL AUTO_INCREMENT,
  `Type` ENUM('Diagnosis', 'Procedure') NOT NULL,
  `Code` VARCHAR(15) NOT NULL,
  `Description` VARCHAR(225) NOT NULL,
  `Encounter_ID` INT NOT NULL,
  PRIMARY KEY (`Bill_ID`),
  INDEX (`Encounter_ID` ASC) VISIBLE,
  CONSTRAINT ``
    FOREIGN KEY (`Encounter_ID`)
    REFERENCES `mydb`.`Dental_Visit` (`Encounter_ID`)
    ON DELETE SET NULL
    ON UPDATE CASCADE);

USE `mydb`;

DELIMITER $$
USE `mydb`$$
CREATE TRIGGER `before_dental_visit_insert`
BEFORE INSERT ON `Dental_Visit`
FOR EACH ROW
BEGIN
    DECLARE current_insurance VARCHAR(225);

    -- Fetch the current insurance from the Customer table
    SELECT Customer.Insurance
    INTO current_insurance
    FROM Customer
    WHERE Customer.Customer_ID = NEW.Customer_ID;

    -- Set the insurance used for this visit
    SET NEW.Insurance_Used = current_insurance;
END;$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
